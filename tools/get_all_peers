#!/usr/bin/env ruby
require 'json'

def get_peers(peer)
  JSON.parse(`./bin/peers #{peer}`)
rescue => e
  []
end

$checked_peers = {}
$available_peers = {}
$peers = []

def check_peers(next_peer)
  while next_peer
    if !$checked_peers[next_peer]
      $checked_peers[next_peer] = true
      more_peers = get_peers(next_peer)
      if !more_peers.empty?
        $available_peers[next_peer] = true
        $peers += (more_peers - $checked_peers.keys)
        $peers.uniq!
        STDERR.puts "Connected to: #{next_peer}, #{$peers.count} peers left"
      end
    end
    next_peer = $peers.pop
  end
end

if ARGV.count != 1
  puts "usage: get_all_peers <known_peers>"
end

STDERR.puts "Getting initial peers"
known_peers = JSON.load(File.read(ARGV[0]))
known_peers.values.each do |peer|
  address = "#{peer["host"]}:#{peer["port"]}"
  STDERR.puts "Getting peers from #{address}"
  $peers += get_peers(address)
end
$peers.uniq!
STDERR.puts "Done getting initial peers, got #{$peers.count}"

STDERR.puts "Starting 100 threads:\n"

100.times.map do |_|
  Thread.new do
    check_peers($peers.pop)
    STDERR.puts "Thread done."
  end
end.each(&:join)

result = {
  checked_peers_count: $checked_peers.count,
  available_peers_count: $available_peers.count,
  available_peers: $available_peers.keys
}

puts JSON.dump(result)
