#!/usr/bin/env ruby

Encoding.default_external = Encoding::UTF_8

require 'open-uri'
require 'json'

def get_account_info(public_key)
  account_url = "https://horizon.stellar.org/accounts/#{public_key}"

  STDERR.puts "Getting #{account_url}"
  begin
    home_domain = JSON.load(open(account_url).read.force_encoding("UTF-8"))["home_domain"]
    raise "No home domain set" unless home_domain
  rescue => e
    STDERR.puts("Could not get home domain: #{e.message}")
    return nil
  end

  account_info = {
    "home_domain" => home_domain
  }

  home_url = "https://#{home_domain}/.well-known/stellar.toml"

  STDERR.puts "Getting #{home_url}"
  begin
    toml = open(home_url).read.force_encoding("UTF-8")
    account_info = simplistic_toml_parse(toml).merge(account_info)
  rescue => e
    STDERR.puts "Could not get stellar.toml: #{e.message}"
  end
  STDERR.puts "Got account_info: #{account_info.inspect}"
  account_info
end

def simplistic_toml_parse(toml)
  values = {}
  toml.lines.each do |line|
    key, value = line.split('=', 2)
    if value
      values[key.strip] = value.strip.gsub('"',"")
    end
  end
  values
end

if ARGV.count != 1
  STDERR.puts "Usage: get_validator_accounts <seen_validators>"
end

validators = JSON.load(File.read(ARGV[0]))
unchecked_accounts = validators.keys

STDERR.puts("Getting #{unchecked_accounts.count} accounts")

5.times.map do |_|
  Thread.new do
    while account = unchecked_accounts.pop
      STDERR.puts "Getting account info for #{account}"
      account_info = get_account_info(account)
      validators[account]["account_info"] = account_info
    end
  end
end.each(&:join)

### Annotate with organizations derived from domains

suffixes = open("https://publicsuffix.org/list/public_suffix_list.dat").readlines.map(&:strip).reject {|l| l.start_with?("//") || l.empty? }
suffixes.sort_by!(&:length).reverse!

validators.each do |_, validator|
  organization = validator.dig("account_info", "ORG_NAME")
  if organization.nil? || organization.empty?
    domain = validator.dig("known_info", "host") || validator.dig("account_info", "home_domain")
    if domain
      suffixes.each do |suffix|
        if domain.chomp! "." + suffix
	        organization = domain.split(".").last + "." + suffix 
          break
        end
      end
    end
  end
  validator["organization_name"] = organization
end

puts JSON.dump(validators)
