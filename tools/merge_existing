#!/usr/bin/env ruby
Encoding.default_external = Encoding::UTF_8

require 'json'
require 'date'

if ARGV.count != 2
  puts "Usage: merge_existing <old_data> <data>"
  exit 1
end

data = nil
begin
  data = JSON.load(File.read(ARGV[0]))
rescue => e
  STDERR.puts "Failed reading old data: #{e.message}"
end

data ||= {}
data["accounts"] ||= {}
data["organizations"] ||= {}

new_data = JSON.load(File.read(ARGV[1]))

def js_time(time)
  (time.to_f * 1000).to_i
end

$crawl_time = Time.now
$crawl_time_js = new_data["last_crawl_time"] = js_time($crawl_time)

$history_buckets = {
  "10m" => 6 * 24,
  "1d" => 14,
  "1w" => 12,
  "1m" => 12
}

$start_of_day = Date.today.to_time
$week_ago = (Date.today - 7).to_time
$month_ago = (Date.today - 31).to_time

$days_ago = (Date.today - $history_buckets["1d"]).to_time
$weeks_ago = (Date.today - (7 * $history_buckets["1w"])).to_time
$months_ago = (Date.today - (31 * $history_buckets["1m"])).to_time

def new_history
  {
    "10m" => [],
    "1d" => [],
    "1w" => [],
    "1m" => []
  }
end

def add_history(history, value)
  value = value.to_s

  history["10m"].push([$crawl_time_js, value])
  history["10m"].shift if history["10m"].length > $history_buckets["10m"]

  # Add history 1-day bucket
  distribution = history["1d"].last
  if distribution.nil? || distribution["time"] < js_time($start_of_day)
    distribution = {"time" => js_time($start_of_day), "data" => {}}
    history["1d"].push(distribution)
  end

  history["1d"].shift if history["1d"].first["time"] < js_time($days_ago)

  distribution["data"][value] ||= 0
  distribution["data"][value] += 1

  # Add history 1-week bucket
  distribution = history["1w"].last
  if distribution.nil? || distribution["time"] < js_time($week_ago)
    distribution = {"time" => js_time($start_of_day), "data" => {}}
    history["1w"].push(distribution)
  end

  history["1w"].shift if history["1w"].first["time"] < js_time($weeks_ago)

  distribution["data"][value] ||= 0
  distribution["data"][value] += 1

  # Add history 1-month bucket
  distribution = history["1m"].last
  if distribution.nil? || distribution["time"] < js_time($month_ago)
    distribution = {"time" => js_time($start_of_day), "data" => {}}
    history["1m"].push(distribution)
  end

  history["1m"].shift if history["1m"].first["time"] < js_time($months_ago)

  distribution["data"][value] ||= 0
  distribution["data"][value] += 1
end

def merge_accounts(old_account, new_account)
  old_account ||= {}

  new_account["last_seen"] = $crawl_time_js
  accepts_connections = new_account["accepts_connections"]

  new_account["accepts_connections_history"] = old_account["accepts_connections_history"] || new_history
  add_history(new_account["accepts_connections_history"], accepts_connections)

  new_account["seen_history"] = old_account["seen_history"] || new_history
  add_history(new_account["seen_history"], true)

  new_account["quorum_history"] = old_account["quorum_history"] || []

  if new_account["quorum_history"].last && new_account["quorum_history"].last["quorum"] != new_account["quorum"]
    new_account["quorum_history"].push({ "time" => $crawl_time_js, "quorum" => new_account["quorum"]})
  end

  old_account.merge(new_account)
end

def merge_organizations(old_organization, new_organization)
  old_organization ||= {}

  new_organization["last_seen"] = $crawl_time_js
  new_organization["seen_history"] = old_organization["seen_history"] || new_history
  add_history(new_organization["seen_history"], true)

  old_organization.merge(new_organization)
end

new_data["accounts"] = data["accounts"].merge(new_data["accounts"])

new_data["accounts"].each do |key, account|
  old_account = data["accounts"][key]
  data["accounts"][key] = merge_accounts(old_account, account)
end

new_data["organizations"] = data["organizations"].merge(new_data["organizations"])

new_data["organizations"].each do |key, organization|
  old_organization = data["organizations"][key]
  data["organizations"][key] = merge_organizations(old_organization, organization)
end

# An organization should be removed if all its validators now have a different organization name
new_data["organizations"].reject! do |name, organization|
  organization["validators"].all? do |id|
    organization = new_data["accounts"][id]["organization_name"] != name
  end
end

puts JSON.dump(new_data)
